(define (make-vect x y) (list x y))

(define (vect-x vec) (car vec))

(define (vect-y vec) (cadr vec))

(define (add-vect u v)
  (make-vect (+ (vect-x u) (vect-x v))
             (+ (vect-y u) (vect-y v))))

(define (make-ship name position velocity num-torps)
  (define (move) 
    (set! position (add-vect position velocity))
    'done)
  (define (fire-torp)
    (cond ((> num-torps 0)
	   (set! num-torps (- num-torps 1))
	   (let ((torp (make-torpedo position
				     (add-vect velocity velocity))))
	     (add-to-universe torp)
	     'torp-fired))
	  (else 'out-of-torpedoes!)))
  (define (explode ship)
    (newline)
    (display name)
    (display " asplode!")
    (remove-from-universe ship))
  (lambda (msg)
    (cond ((eq? msg 'position) position)
	  ((eq? msg 'velocity) velocity)
	  ((eq? msg 'move) (move))
	  ((eq? msg 'attack) (fire-torp))
	  ((eq? msg 'explode) (lambda (ship) (explode ship)))
	  ((eq? msg 'clock-tick) (move) (fire-torp))
	  ((eq? msg 'display)
	   (newline)
      (display name)
      (display " at ")
	   (display position))
	  (else (error "ship can't" msg)))))


(define (make-station name position shields)
  (define (explode station)
    (set! shields (- shields 1))
    (if (= 0 shields)
        (begin (newline)
               (display name)
               (display " asplode!")
               (remove-from-universe station))
        (begin (newline)
               (display name)
               (display " got torpedo'd! ")
               (display shields)
               (display " shield(s) remaining."))))
  (lambda (msg)
    (cond ((eq? msg 'position) position)
	  ((eq? msg 'clock-tick) 'done)
	  ((eq? msg 'explode) (lambda (station) (explode station)))
	  ((eq? msg 'display)
	   (newline)
	   (display name)
      (display " at ")
	   (display position))
	  (else (error "station can't " msg)))))

(define *universe* nil)

(define (add-to-universe thing)
  (set! *universe* (cons thing *universe*)))

(define (delq elt lst)
  (define (del-iter before current after)
    (cond ((null? after)
           (if (eq? current elt) before (append before (list current))))
          ((eq? current elt) 
           (del-iter before (car after) (cdr after)))
          (else
           (del-iter (append before (list current)) (car after) (cdr after)))))
  (del-iter nil (car lst) (cdr lst)))

(define (remove-from-universe thing)
  (set! *universe* (delq thing *universe*)))

(define (clock)
  (for-each (lambda (x) (x 'clock-tick)) *universe*)
  (for-each (lambda (x) (x 'display)) *universe*)
  (let ((init nil))
    (define (collide-iter collisions)
      (set! collisions (find-collisions *universe*))
      (if (pair? collisions)
          (begin
            (((car collisions) 'explode) (car collisions))
            (collide-iter collisions))))
    (collide-iter init)))

(define (run-clock n)
  (cond ((= n 0) 'done)
	(else (clock)
	      (run-clock (- n 1)))))

(define (square x) (* x x))

(define (find-distance a b)
  (sqrt (+ (square (- (vect-x a) (vect-x b)))
	   (square (- (vect-y a) (vect-y b))))))

(define (find-collisions lst)
  (define (test current rest)
    (cond ((null? rest) nil)
	  ((< (find-distance ((car rest) 'position)
			     (current 'position))
	      1)
	   (cons (car rest) (test current (cdr rest))))
	  (else (test current (cdr rest)))))
  (cond ((null? lst) nil)
	(else (let ((new (test (car lst) (cdr lst))))
		(if new ; there are some
		    (append (cons (car lst) new)
			    (find-collisions (cdr lst)))
		    (find-collisions (cdr lst)))))))


(define (make-torpedo position velocity)
  (define (explode torp)
    (newline)
    (display "torpedo goes off!")
    (remove-from-universe torp))
  (define (move) 
    (set! position (add-vect position velocity)))
  (lambda (msg)
    (cond ((eq? msg 'position) position)
	  ((eq? msg 'velocity) velocity)
	  ((eq? msg 'move) (move))
	  ((eq? msg 'clock-tick) (move))
	  ((eq? msg 'explode) (lambda (torp) (explode torp)))
	  ((eq? msg 'display)
	   (newline)
	   (display "torpedo at ")
	   (display position))
	  (else (error "no method" msg)))))

(set! *universe* nil)
(define babylon3 (make-station 'Bablyon3 (make-vect 0 0) 3))
(define enterprise (make-ship 'USSEnterprise (make-vect 1 10) (make-vect 5 0) 3))
(define falcon (make-ship 'MilleniumFalcon (make-vect -10 10) (make-vect 10 0) 8))

(add-to-universe babylon3)
(add-to-universe enterprise)
(add-to-universe falcon)

(enterprise 'attack)

(clock)