;;; code for city navigation problem set

;;; constructors for data abstractions

(define make-segment          ; string, point, point -> segment
  (lambda (name start finish) (list name start finish)))

(define make-point            ; number,number -> Point
  (lambda (x y)             (list x y)))


(define make-map list)       ; segment, ... -> list<segment>

(define make-trip list)      ; segment, ... -> list<segment>


;; match data abstraction

(define make-match list)                 ; X, Y -> match<X,Y>
(define first-of-match car)              ; match<X,Y> -> X
(define second-of-match cadr)            ; match<X,Y> -> Y

;;; some trial data

(define mapseg-1 (make-segment "beacon"  (make-point 0 6) (make-point 3 7)))
(define mapseg-2 (make-segment "beacon"  (make-point 3 7) (make-point 6 8)))
(define mapseg-3 (make-segment "beacon"  (make-point 6 8) (make-point 9 9)))
(define mapseg-4 (make-segment "beacon"  (make-point 9 9) (make-point 12 10)))

(define mapseg-5 (make-segment "massachusetts"  (make-point 0 6) (make-point 1 4)))
(define mapseg-6 (make-segment "massachusetts"  (make-point 1 4) (make-point 2 2)))

(define mapseg-7 (make-segment "masspike"  (make-point 1 4) (make-point 5 3)))
(define mapseg-8 (make-segment "masspike"  (make-point 5 3) (make-point 9 2)))

(define mapseg-9 (make-segment "essex"  (make-point 2 2) (make-point 5 3)))
(define mapseg-10 (make-segment "essex"  (make-point 5 3) (make-point 8 4)))
(define mapseg-11 (make-segment "essex"  (make-point 8 4) (make-point 11 5)))
(define mapseg-12 (make-segment "essex"  (make-point 11 5) (make-point 12 6)))

(define mapseg-13 (make-segment "clarendon" (make-point 9 2) (make-point 8 4)))
(define mapseg-14 (make-segment "clarendon" (make-point 8 4) (make-point 7 7)))
(define mapseg-15 (make-segment "clarendon" (make-point 7 7) (make-point 6 8)))

(define mapseg-16 (make-segment "arlington" (make-point 9 9) (make-point 11 5)))
(define mapseg-17 (make-segment "arlington"  (make-point 11 5) (make-point 12 3)))

(define mapseg-18 (make-segment "park"  (make-point 12 12) (make-point 12 10)))
(define mapseg-19 (make-segment "park"  (make-point 12 10) (make-point 13 9)))

(define mapseg-20 (make-segment "cambridge"  (make-point 12 12) (make-point 13 12)))

(define mapseg-21 (make-segment "tremont"  (make-point 13 12) (make-point 14 11)))
(define mapseg-22 (make-segment "tremont"  (make-point 14 11) (make-point 14 10)))
(define mapseg-23 (make-segment "tremont" (make-point 14 10) (make-point 13 9)))

(define mapseg-24 (make-segment "mason"  (make-point 12 6) (make-point 12 7)))
(define mapseg-25 (make-segment "mason"  (make-point 12 7) (make-point 13 9)))

(define trial-map-1
    (make-map mapseg-1 mapseg-2 mapseg-3 mapseg-4 mapseg-5 mapseg-6
              mapseg-7 mapseg-8 mapseg-9 mapseg-10 mapseg-11 mapseg-12
              mapseg-13 mapseg-14 mapseg-15 mapseg-16 mapseg-17 mapseg-18
              mapseg-19 mapseg-20 mapseg-21 mapseg-22 mapseg-23 mapseg-24
              mapseg-24 mapseg-25))

(define trial-trip-1 
    (make-trip (make-segment "essex" (make-point 0 0) (make-point 1 1))))

(define trial-trip-2
    (make-trip 
               (make-unnamed-segment (make-point 0 0) (make-point 4 2))
               (make-segment "essex" (make-point 4 2) (make-point 5 -1))
               ))

(define trial-trip-3
    (make-trip 
               (make-unnamed-segment (make-point 0 3) (make-point 1 3))
               (make-unnamed-segment (make-point 1 3) (make-point 3 2))
               (make-segment "tremont" (make-point 3 2) (make-point 4 1))))
